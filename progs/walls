function cc_include( f )
	if require then
        package.path = '../?.lua;'..package.path
		require( f )
	else
		dofile( '/john/'..f..'.lua' )
	end
end

cc_include( 'util' )
cc_include( 'dstarlite' )
cc_include( 'coord_move' )
cc_include( 'shapes' )
-- cc_include( 'NodeMap' )
cc_include( 'PQueue' )

if ( os.getComputerLabel() or '' ) == '' then
    os.setComputerLabel( os.getComputerID().. '' )
end

log = '/john/walls_'.. os.getComputerLabel().. '.log'
local logging = true
function templog( s )
    if logging then
        local fh = fs.open( log, 'a' )
        fh.write( mcstamp().. ': '.. s.. '\n' )
        fh.close()
    end
    print( s )
end

t = trackable( turtle )

local args = {...}

--[[
-- W = wall
-- T = turtle
-- R = recycle
-- B = blocks (main building block)
-- G = glass
-- L = lights
-- F = fuel
    WWWWWW


    T
F R B G L
--]]
local places = {
    fuel = {x=-4, y=-3, z=0, dir=2},
    mainbricks = {x=0, y=-3, z=0, dir=2},
    recycling = {x=-2, y=-3, z=0, dir=2},
    glass = {x=2, y=-3, z=0, dir=2},
    lights = {x=4, y=-3, z=0, dir=2},
    swcorner = {x=0, y=0, z=0, dir=0},
}

local inv = {
    {'brick',1}, {'brick',1}, {'brick',1}, {'brick',1},
    {'brick',1}, {'brick',1}, {'brick',1}, {'brick',1},
    {'brick',1}, {'brick',1}, {'brick',1}, {'brick',1},
    {'brick',1}, {'glass',1}, {'glass',1}, {'lights',1},
}

local supplies = {
    'mainbricks',
    'glass',
    'lights',
}

local cfg = {
    fuelTopLevel = 5000,
    refuelLevel = 1000,
    emergencyFuelLevel = 500,
}

local errors = {
    refuel_noslots = 'Could not refuel - no empty slots',
    refuel_chestempty = 'Could not refuel, the fuel chest was empty',
    refuel_notfuel = 'Who put this garbage in the fuel chest?',
}

local context = {
    places = places,
    supplies = supplies,
    inventory = inv,
    config = cfg
}

function getLayers( bottomLeft, topRight, height )

    topRight = table.copy( topRight )

    topRight[1] = topRight[1] - bottomLeft[1]
    topRight[2] = topRight[2] - bottomLeft[2]
    topRight[3] = topRight[3] - bottomLeft[3]

    bottomLeft = {0, 0, 0, bottomLeft[4]}

    local h = bottomLeft[3]
    
    return function()
        if h >= bottomLeft[3] + height  then
            return nil
        end

        local layer = {}
        for x=bottomLeft[1], topRight[1] do
            table.insert( layer, {
                x,
                bottomLeft[2],
                bottomLeft[3] + h - 1,
                0
            })
            table.insert( layer, {
                x,
                topRight[2],
                bottomLeft[3] + h - 1,
                2
            })
        end

        for y=bottomLeft[2], topRight[2] do
            table.insert( layer, {
                bottomLeft[1],
                y,
                bottomLeft[3] + h - 1,
                1
            })
            table.insert( layer, {
                topRight[1],
                y,
                bottomLeft[3] + h - 1,
                3
            })
        end

        return layer
    end
end

function blockmap( v )
    return 'brick'
end

function yielderror( ... )
    templog( errors[ arg[1] ] or arg[1] or 'Error - something went wrong' )
    coroutine.yield( refuelResults.error, unpack( arg ) )
end

function cotask( co, t, ctx, opts )
    return function()
        return coroutine.resume( co, t, ctx, opts )
    end
end

local refuelResults = {
    error = false,
    filled = 'filled',
    stillfull = 'stillfull',
}

local refuel = coroutine.create( function( t, ctx, opts )
    local cfg, action

    while true do repeat
        t, ctx, opts = coroutine.yield( action )
        cfg = ctx.config
        action = refuelResults.stillfull

        action = refuelResults.stillfull
        if t( 'getFuelLevel' ) < cfg.refuelLevel then
            action = refuelResults.filled

            local savestate = t( 'getState' )

            gostate( t, ctx.places.fuel )
            local slot = selectEmpty( t )
            local dropped = false
            if not slot then
                slot = selectFirst( t, 'brick', ctx.inventory )
                if not slot then 
                    yielderror( 'refuel_noslots' )
                    break -- lua continue
                end

                chainMove( t, 'turnLeft', 'drop', 'turnRight' )

                dropped = true
            end

            while t( 'getFuelLevel' ) < cfg.fuelTopLevel do
                if not t( 'suck' ) then
                    yielderror( 'refuel_chestempty' )
                    break
                end

                if not t( 'refuel' ) then
                    yielderror( 'refuel_notfuel' )
                    break
                end
            end
                
            if dropped then
                chainMove( t, 'turnLeft', 'suck', 'turnRight' )
            end

            if opts.comeback then
                gostate( t, savestate )
            end
        end

    until true end
end)
coroutine.resume( refuel )

local resupply = coroutine.create( function( t, ctx, opts )
    local cfg, action

    while true do repeat
        t, ctx, opts = coroutine.yield( action )
        local savestate = t( 'getState' )
        local first = stateToVert( ctx.places.mainbricks )
        local supplies = table.map( ctx.supplies, function( s )
            return {name = s, v = stateToVert( ctx.places[ s ] )}
        end)

        --go to chests in order of start distance.  a micro optimization would be
        --to re-sort the list after every chest in case the first one I go to
        --is in the middle (the turtle will currently bounce back and forth)
        --E.g. it might go middle, left, right, left, right, etc.  For now there
        --are only a couple chests so no problem.
        --Holy shit, travelling salesperson strikes again!
        supplies = table.fsort( supplies, function( a, b )
            return distance( first, a.v ) - distance( first, b.v )
        end)

        table.each( supplies, function( sup )
            gostate( t, vertToState( sup.v ) )
            --assumes turtle has placeholders.  A nice thing would be to 
            --have 2 or 3 slots reserved for junk found while building (dirt,
            --cobble, wood, that stuff).  I could just put expected junk in
            --slots.
            while t( 'suck' ) do end
        end)

        if opts.comeback then
            gostate( t, savestate )
        end
    until true end
end)
coroutine.resume( resupply )

local dothings = coroutine.create( function( t, ctx )

    local gohome = returner( t, gostate )
    local start = stateToVert( t( 'getState' ) )

    table.each( getLayers( v1, v2 ), function( layer )
        layer = table.map( tsp( start, layer ), blockmap )
        table.each( layer, function( v )

            table.each( {
                cotask( refuel, t, ctx ),
                --cotask( resupply, t, ctx ),
                --ifclose( t, places.bricks, 10, resupply )
                returner( t, gocoord )
            }, function( task )
                if task() == false then
                    gohome()
                    resume = false
                    return false
                end
            end)

            gocoord( t, aboveState( vertToState( v ) ) )
            -- select the appropriate brick.  If I'm out,
            -- resupply.  Then place
            t( 'placeDown' )
        end)
    end)

    shape.rect( t, {
        v2 = { tonumber( args[1] or 3 ), tonumber( args[2] or 3 ), 0, 0 },
        xbefore = function()
            t( 'digUp' )
            t( 'dig' )
            t( 'digDown' )
        end,
        filled = true,
        move = persistentMove,
        after = function()
            local resume = true

            table.each( {
                cotask( refuel, t, ctx ),
                --cotask( resupply, t, ctx ),
                returner( t, gostate )
            }, function( task )
                if task() == false then
                    gohome()
                    resume = false
                    return false
                end
            end)

            return resume

            t( 'select', 1 )
            t( 'placeDown' )
        end
    })
end)
