function cc_include( f )
	if require then
        package.path = '../?.lua;'..package.path
		require( f )
	else
		dofile( '/john/'..f..'.lua' )
	end
end

cc_include( 'util' )
cc_include( 'dstarlite' )
cc_include( 'coord_move' )
cc_include( 'shapes' )
-- cc_include( 'NodeMap' )
cc_include( 'PQueue' )

t = trackable( turtle )

function refilldirt( t )
    local refilled = false
    local i = 2

    while t( 'getItemCount', 1 ) < 64 and i < 17 do
        t( 'select', i )
        if t( 'compareTo', 1 ) then
            t( 'transferTo', 1 )
        end

        i = i + 1
    end

    return t( 'getItemCount', 1 ) > 1
end

function retryByDigging( t, cmd )
    local stuff = {
        up = 'digUp',
        forward = 'dig',
        down = 'digDown',
    }

    if stuff[ cmd ] then
        return t( stuff[ cmd ] )
    end
    return false
end

function persistentMove( t )
    for i=1, 25 do
        if t( 'forward' ) then return true end
        if not t( 'dig' ) then
            os.sleep( 2 )
        end
    end
    return false
end

local things = {
    slab = function(t, width, depth )

        if not width or not depth then
            print( 'slab requires a width and depth.' )
            return false
        end

        local state = t( 'getState' )
        shape.rect( t, {
            v2 = { tonumber( width ) + state.x - 1, tonumber( depth ) + state.x - 1, 0, 0 },
            filled = true,
            move = persistentMove,
            retrymove = retryByDigging,
            before = function()
                if t( 'getItemCount', 1 ) == 1 then
                    if not refilldirt( t ) then
                        print( 'Ran out of dirt' )
                        return false
                    end
                end
                t( 'select', 1 )
                if not t( 'placeDown' ) then
                    if not t( 'digDown' ) or not t( 'placeDown' ) then
                        return false
                    end
                end
            end
        })
    end,

    rect = function( t, width, depth, height )
        width = tonumber( width or nil )
        depth = tonumber( depth or nil )
        height = tonumber( height or nil )

        if not height then height = 1 end
        if not width or not depth then
            print( 'rect requires a width and depth.  optionally a height also.' )
            return false
        end

        for i=1,height do
            local state = t( 'getState' )
            shape.rect( t, {
                v2 = { tonumber( width ) + state.x - 1, tonumber( depth ) + state.y - 1, 0, 0 },
                move = persistentMove,
                before = function()
                    if t( 'getItemCount', 1 ) == 1 then
                        if not refilldirt( t ) then
                            print( 'Ran out of dirt' )
                            return false
                        end
                    end
                    t( 'select', 1 )
                    if not t( 'placeDown' ) then
                        if not t( 'digDown' ) or not t( 'placeDown' ) then
                            return false
                        end
                    end
                end
            })

            if not t( 'up' ) then
                if not t( 'digUp' ) or not t( 'up' ) then
                    return false
                end
            end

            --state.z = state.z + 1
            --gostate( t, state )
        end
    end,

    void = function( t, width, depth, height )
        width = tonumber( width or nil )
        depth = tonumber( depth or nil )
        height = tonumber( height or nil )

        if not height then height = 1 end
        if not width or not depth then
            print( 'void requires a width and depth.  optionally a height also.' )
            return false
        end

        local digDir = 'digUp'
        local digOther = 'digDown'
        local stepDir = 'up'
        local start = 1
        if height < 0 then
            digDir, digOther = digOther, digDir
            stepDir = 'down'
        end

        if height > 2 or height < -2 then
            while t( digDir ) do end    --deal with gravel
            t( stepDir )
            start = 2
        end

        for i=start,height,3 do
            local state = t( 'getState' )
            shape.rect( t, {
                v2 = { tonumber( width ) + state.x - 1, tonumber( depth ) + state.y - 1, 0, 0 },
                move = persistentMove,
                retrymove = retryByDigging,
                filled = true,
                before = function()
                    t( 'dig' )
                    if i ~= height then
                        t( digDir )
                    end
                    if i ~= 1 then
                        t( digOther )
                    end
                end
            })

            gostate( t, state )

            while t( digDir ) do end
            if not t( stepDir ) then
                return false
            end

            t( 'turnRight' )
            if i < height then
                while t( digDir ) do end
                t( stepDir )

                if (i + 1) < height then
                    while t( digDir ) do end
                    t( stepDir )
                end
            end
            --state.z = state.z + 1
            --gostate( t, state )
        end
    end,

    wall = function( t, width, height )
    end
}

local args = {...}

if table.getn( args ) < 1 then
    print( 'Usage: shape [ args ]' )
    return
end

if things[ args[1] ] then
    local fn = args[1]
    args[1] = t
    things[ fn ]( unpack( args ) )
else
    print( 'Unknown shape.' )
end

